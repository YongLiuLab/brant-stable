function [process_pars, ui_strucs] = brant_postprocess_defaults(process_str)

brant_path = fileparts(which('brant'));

% string, ui_type, structure field.
switch(lower(process_str))
    case 'head motion est'
        [process_pars, ui_strucs] = sub_uis_func('', '', 'input_nifti', 'disp_3d_nifti');
        ui_strucs{2, 1} = {'edit', 'str_filetype_txt'};
        process_pars.input_nifti.nm_pos = 1;
        process_pars.input_nifti.filetype = 'rp*.txt';
        
        process_pars.out_dir = '';
        ui_strucs = [ui_strucs;...
            {{'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''}];
        
    case 'dicom convert'
        process_pars.par_workers = 0;
        ...process_pars.cvt_dcm = 1;
        process_pars.del_ind = 1;
        process_pars.del = 10;
        process_pars.cvt4d = 1;
        process_pars.out_dir = '';
        process_pars.filetype = '*.nii';
        
        ui_strucs = {...
            ...{'chb', 'num_bin'},          'convert dicom files',   {'cvt_dcm'},                          '';...
            {'edit', 'num_short_right'},      'parallel workers',       {'par_workers'},              '';...
            };
        
        [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_dcm', 'disp_dirs_only');
        ui_strucs = [ui_strucs;...
            {...
             {'chb', 'num_bin'},          'convert to 4d',   {'cvt4d'},                          '';...
             {'chb', 'num_bin'},          'delete first * timepoints',   {'del_ind'},                          '';...
             {'edit', 'str_filetype_nifti'},       'filetype',           {'filetype'},             '';...
             {'edit', 'num_short_right'},      'del first timepoints',       {'del'},              '';...
             {'edit', 'str_dir'},     'out dir',     {'out_dir'},      '';...
             }];
        
%         [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_nifti', 'disp_dirs_nii');
%         ui_strucs = [ui_strucs;...
%             {{'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''}];

%         process_pars.par_workers = 0;
%         process_pars.smri = 0;
%         process_pars.fmri = 1;
%         process_pars.del = 10;
%         process_pars.cvt4d = 1;
%         process_pars.timepoint = 0;
%         ui_strucs = {...
%             {'edit', 'num_short_right'},      'parallel workers',       {'par_workers'},              '';...
%             {'radio', 'hor_txt'},   'data',               {{'smri', 'fmri'}},                          '';...
%             {'chb', 'num_bin'},          'convert to 4d',   {'cvt4d'},                          '';...
%             {'edit', 'num_short_right'},      'check timepoint',       {'timepoint'},              '';...
%             {'edit', 'num_short_right'},      'del first timepoints',       {'del'},              '';...
%             };
%         
%         [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_nifti', 'disp_dirs_only');
%         
%         process_pars.out_dir = '';
%         ui_strucs = [ui_strucs;...
%             {{'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''}];
        
    case 'del timepoints'
        [process_pars, ui_strucs] = sub_uis_func([], [], 'input_nifti', 'disp_dirs_nii');
        process_pars.del = 10;
        process_pars.out_ind = 0;
        process_pars.out_fn = 'brant_4D';
        process_pars.out_dir = '';
        ui_strucs = [ui_strucs;...
                    {...
                    {'edit', 'num_short_right'},      'del first timepoints',       {'del'},              '';...
                    {'chb', 'num_bin'},          'output to another directory',   {'out_ind'},                          '';...
                    {'edit', 'str_short_right'}, 'output fn',   {'out_fn'},                 '';...
                    {'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''};...
                    ];
                
    case 'visual check'
        process_pars.num_chk = 1;
        ui_strucs = {{'edit', 'num_short_right'},      'start subject',       {'num_chk'},              ''};
        
        [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_nifti', 'disp_dirs_nii');
        
    case 'reslice'
        process_pars.tar_vox_size = [3, 3, 3];
        ui_strucs = {{'edit', 'num_short_right'},      'target voxelsize',       {'tar_vox_size'},              ''};
        
        [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_nifti', 'disp_dirs_nii');
        
        process_pars.out_dir = '';
        ui_strucs = [ui_strucs;...
            {{'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''}];
        
    case 'tsnr'
        process_pars.mask = '';
        ui_strucs = {{'edit', 'str_mask'},       'mask',         {'mask'},             ''};
        
        [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_nifti', 'disp_dirs_nii');
        
        process_pars.out_dir = '';
        ui_strucs = [ui_strucs;...
            {{'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''}];
        
    case {'draw roi'}
        process_pars.sphere = 1;
        process_pars.box = 0;
        process_pars.mm = 1;
        process_pars.voxel = 0;
        process_pars.radius = 5;
        process_pars.manual = 1;
        process_pars.file = 0;
        process_pars.coords = '';
        process_pars.coords_file = '';
        process_pars.mask_roi = 0;
        process_pars.aio = 1;
        process_pars.mask = '';
        process_pars.out_dir = '';
        
        ui_strucs = {...
            {'radio', 'hor_txt'}, 'type',               {{'sphere', 'box'}},                          '';...
            {'radio', 'hor_txt'}, 'radius unit',               {{'mm', 'voxel'}},                          '';...
            {'edit', 'num_short_right'},      'radius',       {'radius'},              '';...
            {'radio', 'hor_txt'}, 'input type',               {{'manual', 'file'}},                          '';...
            {'edit', 'num_coords'},      'Coordinates (mm)',          {'coords'},              '';...
            {'edit', 'disp_coordinates'},  'Coordinates in txt or table file (xls,csv)',   {'coords_file'},                 '';...
            {'chb', 'num_bin'},          'mask roi afterwards',   {'mask_roi'},                          '';...
            {'chb', 'num_bin'},          'output to one roi file',   {'aio'},                          '';...
            {'edit', 'str_mask'},       'ref & mask',         {'mask'},             '';...
            {'edit', 'str_dir'},         'out dir',     {'out_dir'},      '';...
            };
        
    case 'merge/extract rois'
        process_pars.merge = 1;
        process_pars.extract = 0;
        process_pars.rois = {''};
        process_pars.roi_info = {''};
        process_pars.roi_vec = [];
        ui_strucs = {...
            {'radio', 'hor_txt'},   'operation',               {{'merge', 'extract'}},                          '';...
            {'edit', 'str_nifti'},       'roi file',   {'rois'},                 '';...
            {'edit', 'str_edge'},       'roi info',    {'roi_info'},              '';...
            {'edit', 'num_longest'},       'roi index',    {'roi_vec'},              '';...
            };
        [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_nifti', 'disp_3d_nifti');
        process_pars.out_fn = 'brant_merge_roi';
        process_pars.out_dir = '';
        ui_strucs = [ui_strucs;...
            {{'edit', 'str_long_left'},     'out fn',     {'out_fn'},      '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''}];
        
    case 'extract time series'
        process_pars.mask = '';
        process_pars.no_nan = 1;
        ui_strucs = {{'edit', 'str_mask'},       'mask',         {'mask'},             '';...
            };
        [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_nifti', 'disp_dirs_nii');
        process_pars.out_dir = '';
        ui_strucs = [ui_strucs;...
            {{'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''}];
        
    case {'extract mean adv'}
        process_pars.matrix = 1;
        process_pars.volume = 0;
        process_pars.corr_mat = '';
        process_pars.mask = '';
        process_pars.rois = {''};
        process_pars.roi_info = {''};
        process_pars.discard_bad_subj = 1;
        ...process_pars.nan_outliers = 1;
        process_pars.corr_ind = 0;
        process_pars.Pearson = 0;
        process_pars.Spearman = 1;
        process_pars.groups = 'grp1,grp2';
        process_pars.regr_strs = 'age;sex';
        process_pars.corr_scores = '';
        process_pars.grp_filter = '';
        process_pars.subj_prefix = '';
        process_pars.regressors_tbl = '';
        
        ui_strucs = {...
            {'radio', 'hor_txt'},   'data',               {{'matrix', 'volume'}},                          '';...
            {'edit', 'str_mat'},       'FC file (*.mat)',   {'corr_mat'},                 '';...
            {'edit', 'str_mask'},       'mask',         {'mask'},             '';...
            ...{'edit', 'disp_rois'},       'roi tagged by numbers',   {'rois'},                 '';...
            {'edit', 'str_nifti'},       'roi file',   {'rois'},                 '';...
            {'edit', 'str_edge'},       'roi info',    {'roi_info'},              '';...
            };
        [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_nifti', 'disp_3d_nifti');
        process_pars.out_dir = '';
        process_pars.out_prefix = '';
        ui_strucs = [ui_strucs;...
            {...{'chb', 'num_bin'},          'discard outliers (3 std)',   {'nan_outliers'},                          '';...
            {'chb', 'num_bin'},          'correlation with scores',   {'corr_ind'},                          '';...
            {'radio', 'hor_txt'},   'corr_type',               {{'Pearson', 'Spearman'}},                          '';...
            {'seperator', 'str'}, '============ table info ============', '', '';...
            {'edit', 'str_excel'},  'subj info',   {'regressors_tbl'},                 '';...
            {'edit', 'str_short_right'}, 'filename removal',   {'subj_prefix'},                 '';...
            {'edit', 'str_long_right'},        'group(s)',   {'groups'},                 '';...
            {'edit', 'str_long_right'},        'regressors',   {'regr_strs'},                 '';...
            {'edit', 'str_long_right'},          'filter',   {'grp_filter'},                          '';...
            {'edit', 'str_short_right'}, 'score correlation',   {'corr_scores'},                 '';...
            {'chb', 'num_bin'},          'discard subjects without info',   {'discard_bad_subj'},                          '';...
            {'edit', 'str_short_right'},     'output prefix',     {'out_prefix'},      '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''}];
        
    case {'extract mean'}
        process_pars.matrix = 0;
        process_pars.volume = 1;
        process_pars.corr_mat = '';
        process_pars.mask = '';
        process_pars.rois = {''};
        process_pars.roi_info = {''};
        process_pars.subj_prefix = '';
        
        ui_strucs = {...
            {'radio', 'hor_txt'},   'data',               {{'matrix', 'volume'}},                          '';...
            {'edit', 'str_mat'},       'FC file (*.mat)',   {'corr_mat'},                 '';...
            {'edit', 'str_mask'},       'mask',         {'mask'},             '';...
            {'edit', 'str_nifti'},       'roi file',   {'rois'},                 '';...
            {'edit', 'str_edge'},       'roi info',    {'roi_info'},              '';...
            };
        [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_nifti', 'disp_3d_nifti');
        process_pars.out_dir = '';
        process_pars.out_prefix = '';
        ui_strucs = [ui_strucs;...
            {...
            {'edit', 'str_short_right'}, 'filename removal',   {'subj_prefix'},                 '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''}];
        
    case {'roi calculation'}
        process_pars.roi_wise = 1;
        ...process_pars.vox_wise = 0;
            process_pars.ext_mean = 1;
        process_pars.roi2roi = 1;
        process_pars.roi2wb = 1;
        process_pars.partialcorr = 0;
        process_pars.pearsoncorr = 1;
        process_pars.mask = '';
        process_pars.rois = {''};
        process_pars.roi_info = {''};
        process_pars.roi_thres = 0;
        
        ui_strucs = {...{'radio', 'vert_two'},     {'ROI-wise correlation', 'voxel-wise correlation'},               {'roi_wise', 'vox_wise'},                          '';...
            {'chb', 'num_bin'},       'ROI-wise / voxel-wise correlation',          {'roi_wise'},              '';...
            ...{'seperator', 'str'}, '========================================', '', '';...
            {'edit', 'str_nifti'},       'roi file',   {'rois'},                 '';...
            {'edit', 'str_edge'},       'roi info',    {'roi_info'},              '';...
            {'edit', 'num_short_right'},       'voxelsize threshold',            {'roi_thres'},               '';...
            {'edit', 'str_mask'},       'mask',   {'mask'},             '';...
            };
        [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_nifti', 'disp_dirs_nii');
        
        process_pars.out_dir = '';
        ui_strucs = [ui_strucs;...
            {{'seperator', 'str'}, '========================================', '', '';...
            {'chb', 'num_bin'},       'extract mean',          {'ext_mean'},              '';...
            {'chb', 'num_bin'},       'roi to roi correlation',         {'roi2roi'},             '';...
            {'chb', 'num_bin'},       'roi to whole brain correlation',         {'roi2wb'},             '';...
            {'seperator', 'str'}, '========================================', '', '';...
            {'radio', 'vert_two'}, {'Pearson''s correlation', 'Partial correlation'},               {'pearsoncorr', 'partialcorr'},                          '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''}];
    case 'fcd'
        process_pars.cpu = 1;
        process_pars.gpu = 0;
        process_pars.mask = '';
        process_pars.out_dir = '';
        ui_strucs = {{'radio', 'hor_txt'},   'compute',               {{'cpu', 'gpu'}},                          '';...
            {'edit', 'str_mask'},       'mask',   {'mask'},             '';...
            };
        [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_nifti', 'disp_dirs_nii');
        ui_strucs = [ui_strucs;...
            {{'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''}];
        
    case 'network calculation'
        process_pars.par_workers = 0;
        process_pars.thres_corr_bin = 1;
        process_pars.threshold_corr = 0.3:0.01:0.6;
        process_pars.matrix_type = 'raw value (corr_z)' ;
        process_pars.thres_spar_bin = 1;
        process_pars.threshold_spar = 0.05:0.01:0.2;
        process_pars.mst = 1;
        process_pars.out_dir = '';
        process_pars.net_calcs = brant_net_measure_defaults;
        
        ui_strucs = {...
        {'edit', 'num_short_right'},      'parallel workers',       {'par_workers'},              '';...
        };
    
        [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_matrix', 'disp_3d_matrix');
        ui_strucs = [ui_strucs;...
            {...
            {'popupmenu_right', 'disp_view_opts'},      'matrix type',    {{{'matrix_type'};'raw value (corr_z)';'raw value (corr_r)';'absolute value (corr_z)';'absolute value (corr_r)'}},              '';...
            {'chb', 'num_bin'},       'thresholds of correlation coefficient',         {'thres_corr_bin'},             '';...
            {'edit', 'num_short_right'},      'correlation thres',       {'threshold_corr'},              '';...
            {'chb', 'num_bin'},       'thresholds of sparsity',         {'thres_spar_bin'},             '';...
            {'edit', 'num_short_right'},      'sparsity thres',       {'threshold_spar'},              '';...
            {'chb', 'num_bin'},       'Minimun Spanning Tree',         {'mst'},             '';...
            {'edit', 'disp_net_calcs'}, 'Network Properties',   {'net_calcs'},                 '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      '';...
            }];
        
    case 'network statistics'
        
        process_pars.stat_type = 'two sample t-test';
        process_pars.grp_stat = 'grp1,grp2';
        
        process_pars.discard_bad_subj = 1;
        process_pars.regr_strs = '';
        process_pars.grp_filter = '';
        process_pars.subj_prefix = '';
        process_pars.regressors_tbl = '';
        
        ...process_pars.net_mat = '';
        process_pars.out_dir = '';
        
        [process_pars, ui_strucs] = sub_uis_func(process_pars, [], 'input_matrix', 'disp_3d_matrix');
        
        ui_strucs = [ui_strucs;...
            {...
            ...{'edit', 'str_mat'},       'net file',   {'net_mat'},                 '';...
            {'popupmenu_right', 'disp_view_opts'},      'stat type',    {{{'stat_type'};'one sample t-test';'two sample t-test'}},              '';...
            {'edit', 'str_long_right'}, 'group(s)',   {'grp_stat'},                 '';...
            {'seperator', 'str'}, '============ table info ============', '', '';...
            {'edit', 'str_excel'},  'subj info',   {'regressors_tbl'},                 '';...
            {'edit', 'str_short_right'}, 'filename removal',   {'subj_prefix'},                 '';...
            {'edit', 'str_long_right'},        'regressors',   {'regr_strs'},                 '';...
            {'edit', 'str_long_right'},          'filter',   {'grp_filter'},                          '';...
            {'chb', 'num_bin'},          'discard subjects without info',   {'discard_bad_subj'},                          '';...
            {'edit', 'str_dir'},     'out dir',        {'out_dir'},      ''}];
        
    case 'am'
        process_pars.timepoint = 0;
        process_pars.mask = '';
        process_pars.nor = 1;
        
        ui_strucs = {{'edit', 'str_mask'},       'mask',         {'mask'},             '';...
            };
        [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_nifti', 'disp_dirs_nii');
        process_pars.input_nifti.filetype = 'f*.nii';
        process_pars.input_nifti.nm_pos = 1;
        
        process_pars.am = 1;
        process_pars.std = 1;
        process_pars.var = 1;
        
        process_pars.out_dir = '';
        ui_strucs = [ui_strucs;...
            {...
            {'edit', 'num_short_right'},      'check timepoint',          {'timepoint'},              '';...
            {'chb', 'num_bin'},                 'mean temporal ampilitude',   {'am'},                          '';...
            {'chb', 'num_bin'},                 'standard deviation',   {'std'},                          '';...
            {'chb', 'num_bin'},                 'variation',   {'var'},                          '';...
            {'seperator', 'str'}, '========================================', '', '';...
            {'chb', 'num_bin'},                'normalize transform',   {'nor'},                          '';...
            {'edit', 'str_dir'},               'out dir',     {'out_dir'},      ''}];
        
    case 'fgn'
        process_pars.timepoint = 0;
        process_pars.mask = '';
        process_pars.nor = 1;
        
        ui_strucs = {{'edit', 'str_mask'},       'mask',         {'mask'},             '';...
            };
        [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_nifti', 'disp_dirs_nii');
        process_pars.input_nifti.filetype = 's*.nii';
        process_pars.input_nifti.nm_pos = 0;
        
        process_pars.out_dir = '';
        ui_strucs = [ui_strucs;...
            {{'edit', 'num_short_right'},      'check timepoint',          {'timepoint'},              '';...
            {'chb', 'num_bin'},          'normalize transform',   {'nor'},                          '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''}];
        
    case 'reho'
        process_pars.timepoint = 0;
        process_pars.neighbour_num = 26;
        process_pars.mask = '';
        process_pars.nor = 1;
        
        ui_strucs = {{'edit', 'str_mask'},       'mask',         {'mask'},             '';...
            };
        [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_nifti', 'disp_dirs_nii');
        process_pars.input_nifti.filetype = 'f*.nii';
        process_pars.input_nifti.nm_pos = 1;
        
        process_pars.out_dir = '';
        ui_strucs = [ui_strucs;...
            {{'edit', 'num_short_right'},      'check timepoint',    {'timepoint'},              '';...
            {'popupmenu', 'num_neighbours_pts'},      'nbr voxels',    {{'neighbour_num';'6';'18';'26'}},              '';...
            {'chb', 'num_bin'},          'normalize transform',   {'nor'},                          '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''}];
        
    case 'alff/falff'
        process_pars.timepoint = 0;
        process_pars.tr = 0;
        process_pars.lower_thr = 0.01;
        process_pars.higher_thr = 0.08;
        process_pars.nor = 1;
        process_pars.mask = '';
        
        ui_strucs = {{'edit', 'str_mask'},       'mask',         {'mask'},             '';...
            };
        [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_nifti', 'disp_dirs_nii');
        process_pars.input_nifti.filetype = 'd*.nii';
        process_pars.input_nifti.nm_pos = 1;
        
        process_pars.out_dir = '';
        ui_strucs = [ui_strucs;...
            {{'edit', 'num_short_right'},      'check timepoint',    {'timepoint'},              '';...
            {'edit', 'num_short_right'},      'TR',    {'tr'},              '';...
            {'edit', 'num_short_right'},      'lower cutoff (Hz)',    {'lower_thr'},              '';...
            {'edit', 'num_short_right'},      'higher cutoff (Hz)',    {'higher_thr'},              '';...
            {'chb', 'num_bin'},          'normalize transform',   {'nor'},                          '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''}];
        
    case 'statistics'
        
        process_pars.stat_type = 'two sample t-test';
        process_pars.grp_stat = 'grp1,grp2';
        
        process_pars.p_thr = 0.05;
        process_pars.fdr = 0;
        process_pars.fdr2 = 1;
        process_pars.bonf = 1;
        
        process_pars.mask = '';
        process_pars.discard_bad_subj = 1;
        process_pars.regr_strs = '';
        process_pars.grp_filter = '';
        process_pars.subj_prefix = '';
        process_pars.regressors_tbl = '';
        
        process_pars.matrix = 1;
        process_pars.volume = 0;
        process_pars.mat_vox2vox = 0;
            
    ui_strucs = {...
        {'radio', 'hor_txt'},   'data',               {{'matrix', 'volume'}},                          '';...
        {'seperator', 'str'}, '====== input for matrix or volume ======', '', '';...
        {'chb', 'num_bin'},          'data from voxel to voxel corr',   {'mat_vox2vox'},                          '';...
        ...{'edit', 'str_mat'},       'FC file (*.mat)',   {'corr_mat'},                 '';...
        };
    [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_matrix', 'disp_3d_matrix');
    
    ui_strucs = [ui_strucs;...
        {{'edit', 'str_mask'},       'mask',         {'mask'},             '';}...
        ];
    [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_nifti', 'disp_3d_nifti');
    
    ...process_pars.out_prefix = '';
        process_pars.out_dir = '';
    ui_strucs = [ui_strucs;...
        {...{'seperator', 'str'}, '=========== statistics type ===========', '', '';...
        {'popupmenu', 'disp_view_opts'},      'stat type',    {{{'stat_type'};'one sample t-test';'two sample t-test';'paired t-test'}},              '';...
        {'edit', 'str_long_right'}, 'group(s)',   {'grp_stat'},                 '';...
        {'edit', 'num_short_right'},      'p threshold',    {'p_thr'},              '';...
        {'chb', 'num_bin_triple_hor'},        {'FDR', 'FDR2', 'Bonf'},   {{'fdr', 'fdr2', 'bonf'}},                          '';...
        {'seperator', 'str'}, '============ table info ============', '', '';...
        {'edit', 'str_excel'},  'subj info',   {'regressors_tbl'},                 '';...
        {'edit', 'str_short_right'}, 'filename removal',   {'subj_prefix'},                 '';...
        {'edit', 'str_long_right'},        'regressors',   {'regr_strs'},                 '';...
        {'edit', 'str_long_right'},          'filter',   {'grp_filter'},                          '';...
        {'chb', 'num_bin'},          'discard subjects without info',   {'discard_bad_subj'},                          '';...
        {'edit', 'str_dir'},     'out dir',        {'out_dir'},      ''}];
    
    case 'ibma'
        
        process_pars.stouffer = 0;
        process_pars.fisher = 0;
        process_pars.fem = 0;
        process_pars.mem = 1;
        process_pars.friston = 0;
        process_pars.nicolas = 0;
        
        process_pars.mask = '';
        process_pars.num_subjs_tbl = '';
        process_pars.p_thr = 0.05;
        process_pars.fdr = 0;
        process_pars.fdr2 = 1;
        process_pars.bonf = 1;
        
        process_pars.matrix = 1;
        process_pars.volume = 0;
        
        ui_strucs = {{'radio', 'hor_txt'},   'data',               {{'matrix', 'volume'}},                          '';...
            {'edit', 'str_mask'},       'mask',         {'mask'},             '';...
            {'edit', 'str_excel'},  'center info',   {'num_subjs_tbl'},                 '';...
            };
        
        [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_nifti', 'disp_3d_nifti');
        %         process_pars.input_nifti.filetype = '*.nii/mat';
        [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, 'input_matrix', 'disp_3d_matrix');
        
        process_pars.input_matrix.filetype = 'ttest2*.mat';
        
        process_pars.out_dir = '';
        
        ui_strucs = [ui_strucs;...
            {...{'seperator', 'str'}, '=========== input data ===========', '', '';...
            {'edit', 'num_short_right'},      'p threshold',    {'p_thr'},              '';...
            {'chb', 'num_bin_triple_hor'},        {'FDR', 'FDR2', 'Bonf'},   {{'fdr', 'fdr2', 'bonf'}},                          '';...
            {'seperator', 'str'}, '========== IBMA methods ==========', '', '';...
            {'chb', 'num_bin'},          'Stouffer''s z-score',            {'stouffer'},                          '';...
            {'chb', 'num_bin'},          'Fisher''s method',               {'fisher'},                          '';...
            {'chb', 'num_bin'},          'Fixed Effect Model',             {'fem'},                          '';...
            {'chb', 'num_bin'},          'Mixed Effect Model',             {'mem'},                          '';...
            {'chb', 'num_bin'},          'Friston''s method',              {'friston'},                          '';...
            {'chb', 'num_bin'},          'Nicolas''s method (Overlap)',    {'nicolas'},                          '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''}];
        
    case 'multiple correction'
        
        process_pars.p_thr = 0.05;
        process_pars.fdr = 0;
        process_pars.fdr2 = 0;
        process_pars.bonf = 0;
        process_pars.stat_mats = '';
        
        ui_strucs = {{'edit', 'num_short_right'},      'p threshold',    {'p_thr'},              '';...
            {'chb', 'num_bin_triple_hor'},        {'FDR', 'FDR2', 'Bonf'},   {{'fdr', 'fdr2', 'bonf'}},                          '';...
            {'edit', 'disp_mats_group_corr'}, 'statistical matrices',   {'stat_mats'},                 '';...
            };
        
        process_pars.out_dir = '';
        ui_strucs = [ui_strucs;...
            {{'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''}];
        
    case 'surface mapping'
        
        process_pars.alpha = 1.0;
        process_pars.surface = {fullfile(brant_path, 'brant_surface', 'standard_withCC.txt')};
        process_pars.vol_map = {''};
        
        process_pars.color_type_pos = 'hot';
        process_pars.color_type_neg = 'cool';
        process_pars.material_type = 'dull';
        process_pars.lighting_type = 'gouraud';
        process_pars.shading_type = 'interp';
        process_pars.mode_display = 'whole brain:axial up';
        process_pars.vol_thr = 'vol ~= 0';
        process_pars.colorbar = 1;
%         process_pars.smooth = 1;
        process_pars.discrete = 0;
        process_pars.zero_color = [0.95,0.95,0.95];
        ...process_pars.spin_angle = '';
        ...process_pars.out_dir = {'.'};
        
        ui_strucs = {...
            {'chb', 'num_bin'},       'show colorbar',         {'colorbar'},             '';...
            ...{'chb', 'num_bin'},       'smooth volume',         {'smooth'},             '';...
            {'chb', 'num_bin'},       'discrete values',         {'discrete'},             '';...
            {'edit', 'num_longest'},       'zero color',    {'zero_color'},              '';...
            {'edit', 'num_short_left'},      'alpha',    {'alpha'},              '';...
            {'popupmenu', 'disp_view_opts'},      'pos color',    {{{'color_type_pos'};'hsv';'jet';'hot';'cool';'spring';'summer';'autumn';'winter';'gray';'bone';'copper';'pink';'lines'}},              '';...
            {'popupmenu', 'disp_view_opts'},      'neg color',    {{{'color_type_neg'};'hsv';'jet';'hot';'cool';'spring';'summer';'autumn';'winter';'gray';'bone';'copper';'pink';'lines'}},              '';...
            {'popupmenu', 'disp_view_opts'},      'display',    {{{'mode_display'};'halves:left lateral';'halves:left medial';'halves:right lateral';'halves:right medial';'halves:left and right';'whole brain:sagital left';'whole brain:sagital right';'whole brain:axial up';'whole brain:axial down';'whole brain:coronal anterior';'whole brain:coronal posterior'}},              '';...
            {'popupmenu', 'disp_view_opts'},      'material',    {{{'material_type'};'shiny';'dull';'metal'}},              '';...
            {'popupmenu', 'disp_view_opts'},      'lighting',    {{{'lighting_type'};'flat';'gouraud';'phong';'none'}},              '';...
            {'popupmenu', 'disp_view_opts'},      'shading',    {{{'shading_type'};'flat';'faceted';'interp'}},              '';...
            {'edit', 'str_surf'},      'surface',    {'surface'},              '';...
            {'edit', 'str_mask'},       'brain vol',         {'vol_map'},             '';...
            {'edit', 'str_thr_parse'},     'threshold',      {'vol_thr'},                          '';...
            ...{'chb', 'num_bin_num_edit'},       'spin&save',         {'spin_angle'},             '';...
            ...{'edit', 'str_dir'},     'out dir',     {'out_dir'},      '';...
            };
        
    case 'roi mapping'
        
        process_pars.alpha = 0.3;
        process_pars.disp_surface = 1;
        process_pars.disp_legend = 0;
        process_pars.surface = {fullfile(brant_path, 'brant_surface', 'standard_withCC.txt')};
        process_pars.rois = {fullfile(brant_path, 'template', 'spm12_masks', 'GM_brain.nii')};
        process_pars.roi_vec = [23,30,31,32];
        process_pars.roi_info = {fullfile(brant_path, 'template', 'spm12_masks', 'labels_Neuromorphometrics.txt')};
        process_pars.mode_display = 'axial down';
        ...process_pars.spin_angle = '';
%         process_pars.rand_color = 1;
%         process_pars.input_color = 0;
        process_pars.random = 1;
        process_pars.input = 0;
        process_pars.color_input = {''};
        process_pars.output_color = 0;
        process_pars.out_dir = {'.'};
        
        ui_strucs = {...
            {'edit', 'num_short_left'},      'alpha',    {'alpha'},              '';...
            {'popupmenu', 'disp_view_opts'},      'display',    {{{'mode_display'};'sagital left';'sagital right';'axial up';'axial down';'coronal anterior';'coronal posterior'}},              '';...
            {'chb', 'num_bin'},        'display surface',   {'disp_surface'},                          '';...
            {'edit', 'str_surf'},      'surface',    {'surface'},              '';...
            {'chb', 'num_bin'},        'display legend',   {'disp_legend'},                          '';...
            {'edit', 'str_nifti'},       'roi file',   {'rois'},                 '';...
            {'edit', 'str_edge'},       'roi info',    {'roi_info'},              '';...
            {'edit', 'num_longest'},       'roi vals',    {'roi_vec'},              '';...
            ...{'chb', 'num_bin_num_edit'},       'spin&save',         {'spin_angle'},             '';...
            {'radio', 'hor_txt'}, 'color',               {{'random', 'input'}},                          '';...
%             {'radio', 'vert_two'}, {'random color', 'input color'},               {'rand_color', 'input_color'},                          '';...
            {'edit', 'str_edge'},       'color file',    {'color_input'},              '';...
            {'chb', 'num_bin'},        'output color',   {'output_color'},                          '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      '';...
            };
        
    case 'network visualization'
        process_pars.surface = {fullfile(brant_path, 'brant_surface', 'standard_withCC.txt')};
        process_pars.alpha = 0.2;
        process_pars.mode_display = 'whole brain:axial';
        process_pars.node_txt = '';
        process_pars.show_label = 1;
        process_pars.node_size = 3;
        process_pars.same_color = 0;
        process_pars.user_color = 1;
        process_pars.color_same = [1, 0, 0];
        process_pars.diff_color = 0;
        process_pars.modules_info = 'module 1';
        process_pars.color_modules = [1, 0, 0];
        process_pars.edge = '';
        process_pars.edge_disp = 1;
        process_pars.hide_node = 1;
        process_pars.thickness = 1;
        process_pars.adjust_edge_color = 1;
        process_pars.pos_color = [1, 0, 0];
        process_pars.neg_color = [0, 1, 1];
        process_pars.edge_thr = 'edge ~= 0';
        process_pars.wei_rad = 0;
        process_pars.wei_thr = 0;
        
        ui_strucs = {{'edit', 'str_surf'},      'surface',    {'surface'},              '';...
            {'edit', 'num_short_left'},     'alpha',      {'alpha'},                          '';...
            {'popupmenu', 'disp_view_opts'},      'display',    {{{'mode_display'};'halves:left lateral';'halves:left medial';'halves:right lateral';'halves:right medial';'halves:left and right';'whole brain:sagital left';'whole brain:sagital right';'whole brain:axial';'whole brain:coronal'}},              '';...
            {'seperator', 'str'}, '========================================', '', '';...
            {'edit', 'str_node'},       'node',         {'node_txt'},             '';...
            {'chb', 'num_bin'},        'show node labels',   {'show_label'},                          '';...
            {'chb', 'num_bin_num_edit'},       'same size',         {'node_size'},             '';...
            ...{'radio', 'vert_node_color'}, {'same node color', 'node color for module'},               {{'same_color'}, {'color_same'}, {'diff_color'}, {{'modules_info'}; 'module 1'}, {'color_modules'}},                          '';...
            {'radio', 'vert_node_color_three'}, {'user defined node color', 'same node color', 'module color'},               {{'user_color'}, {'same_color'}, {'color_same'}, {'diff_color'}, {{'modules_info'}; 'module 1'}, {'color_modules'}},                          '';...
            {'seperator', 'str'}, '========================================', '', '';...
            {'edit', 'str_edge'},      'edge',    {'edge'},              '';...
            {'chb', 'num_bin'},        'display edges',   {'edge_disp'},                          '';...
            {'chb', 'num_bin'},        'hide nodes without edge',   {'hide_node'},                          '';...
            {'edit', 'num_short_left'},     'thickness',      {'thickness'},                          '';...
            {'chb', 'num_bin'},        'adjust edge color',   {'adjust_edge_color'},                          '';...
            {'pushbutton', 'color_hor_dual'},        {'positive edge', 'negative edge'},   {{''}, {'pos_color'}, {''}, {'neg_color'}},                          '';...
            {'edit', 'str_thr_parse'},     'threshold',      {'edge_thr'},                          '';...
            {'chb', 'num_bin'},       'use summed weight as node radius',         {'wei_rad'},             '';...
            {'edit', 'num_short_left'},     'threshold',      {'wei_thr'},                          '';...
            {'seperator', 'str'}, '========================================', '', '';...
            };
        
    case 'mask to table'
        process_pars.sep_c = 1;
        process_pars.lab_c = 0;
        process_pars.mask_in = '';
        ...process_pars.int_thr = 0;
            process_pars.cs_thr = 5;
        process_pars.template_img = {fullfile(brant_path, 'template', 'aal_3mm.nii')};
        process_pars.template_info = {fullfile(brant_path, 'template', 'aal.nii.txt')};
        process_pars.out_dir = '';
        
        ui_strucs = {{'radio', 'vert_two'}, {'seperated binary clusters', 'labeled clusters'},               {'sep_c', 'lab_c'},                          '';...
            {'edit', 'str_nifti'},       'input mask',         {'mask_in'},             '';...
            ...{'edit', 'num_short_right'},     'intensity threshold',      {'int_thr'},                          '';...
            {'edit', 'num_short_right'},     'cluster size',      {'cs_thr'},                          '';...
            {'edit', 'str_mask'},       'template',         {'template_img'},             '';...
            {'edit', 'str_edge'},      'info',    {'template_info'},              '';...
            {'edit', 'str_dir'},     'out dir',     {'out_dir'},      ''};
    otherwise
        error('UI parameters for %s are not found!', process_str);
        
end

function [process_pars, ui_strucs] = sub_uis_func(process_pars, ui_strucs, struc_1, ui_type)

switch(ui_type)
    
    case 'disp_dirs_nii'
        
        process_pars.(struc_1).nm_pos = 1;
        process_pars.(struc_1).filetype = '*.nii';
        process_pars.(struc_1).dirs = {''};
        process_pars.(struc_1).is4d = 1;
        
        ui_strucs = [ui_strucs;...
            {{'edit', 'num_short_right'},       'name position',            {struc_1, 'nm_pos'},               '';...
            {'edit', 'str_filetype_nifti'},       'filetype',           {struc_1, 'filetype'},             '';...
            {'chb', 'num_bin'},          '4D nifti files (3D if unchecked)',    {struc_1, 'is4d'},                          '';...
            {'edit', 'disp_dirs_nii'},       'input dirs',   {struc_1, 'dirs'},                 '';...
            }];
        
    case {'disp_3d_nifti'}
        
        process_pars.(struc_1).nm_pos = 0;
        process_pars.(struc_1).filetype = '*.nii';
        process_pars.(struc_1).dirs = {''};
        
        ui_strucs = [ui_strucs;...
            {{'edit', 'num_short_right'},      'name position',  {struc_1, 'nm_pos'},               '';...
            {'edit', 'str_filetype_nifti'},    'filetype',           {struc_1, 'filetype'},             '';...
            {'edit', 'disp_dirs_nii'},       'input dirs',   {struc_1, 'dirs'},                 '';...
            }];
        if strcmpi(ui_type, 'disp_3d_matrix')
            process_pars.(struc_1).filetype = '*.mat';
        end
    
    case {'disp_3d_matrix'}
        
        process_pars.(struc_1).nm_pos = 0;
        process_pars.(struc_1).filetype = '*.nii';
        process_pars.(struc_1).dirs = {''};
        
        ui_strucs = [ui_strucs;...
            {{'edit', 'num_short_right'},      'name position',  {struc_1, 'nm_pos'},               '';...
            {'edit', 'str_filetype_matrix'},    'filetype',           {struc_1, 'filetype'},             '';...
            {'edit', 'disp_dirs_nii'},       'input dirs',   {struc_1, 'dirs'},                 '';...
            }];
        if strcmpi(ui_type, 'disp_3d_matrix')
            process_pars.(struc_1).filetype = '*.mat';
        end
        
    case 'disp_dirs_only' % dicom
        
        process_pars.(struc_1).nm_pos = 1;
        process_pars.(struc_1).dirs = {''};
        
        ui_strucs = [ui_strucs;...
            {{'edit', 'num_short_right'},       'name position',            {struc_1, 'nm_pos'},               '';...
            {'edit', 'disp_dirs_nii'},       'input dirs',   {struc_1, 'dirs'},                 '';...
            }];
end
