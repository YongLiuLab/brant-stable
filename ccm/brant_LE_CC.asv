function [LE, CC] = brat_LE_CC(gMatrix, LE_ind, CC_ind)

% Local efficiency and clustering coefficient

if ~any([LE_ind, CC_ind])
    LE = [];
    CC = [];
    return;
end

N = size(gMatrix, 1);
gMatrix(1:(N+1):end) = 0;

if CC_ind == 1
    CC.nodal = zeros(N, 1);
end

if LE_ind == 1
    LE.nodal = zeros(N, 1);
end

gBin = gMatrix > 0;%Ensure binary network
for m = 1:N
    temp = gBin(gBin(m, :), gBin(m, :));
    Num = size(temp, 1);
    if(Num > 1),
        num_tot = Num * (Num - 1);
        
        if CC_ind == 1
            CC.nodal(m) = sum(temp(:)) / num_tot;
        end
        
        if LE_ind == 1
        effi = 1./graphallshortestpaths(sparse(temp));
        LE.nodal(m) = sum(effi(:)) / num_tot;
    end
end

CC.global = mean(CC.nodal);
LE.global = mean(LE.nodal);


% if(issparse(gMatrix)),  sparflag = 1;   else   sparflag = 0;    end
% 
% N = length(gMatrix);
% gMatrix(1:(N+1):end) = 0;%Clear self-edges
% LE.nodal = zeros(N,1);   %Preallocate
% for i = 1:N
%     neig = (gMatrix(i,:) > 0); %Neighbor nodes  %%DDDDD
%     num  = sum(neig);
%     if(num > 1)%Need 2 nodes at least
%         newg = gMatrix(neig, neig);%Subgraph 	%%DDDDD
%         if(sparflag), newg = sparse(newg);  end
%         effi = 1./dijk(newg, 1:num);
%         effi(1:(num+1):end) = 0;%Clear diagnal-elements
%         LE.nodal(i) = sum(effi(:))/(num*(num-1));
%     end
% end
% AverLoc = sum(LE.nodal)/N;